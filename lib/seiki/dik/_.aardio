namespace seiki.dik;
import key;
//https://community.bistudio.com/wiki/DIK_KeyCodes
import console;
dik2v = function(code, e) {
	var it;
	it = key.scan2v(code, e)
	select (code) {
		case 71 { it = 0x67/*_VK_NUMPAD7*/ }
		case 72 { it = 0x68/*_VK_NUMPAD8*/ }
		case 73 { it = 0x69/*_VK_NUMPAD9*/ }
		case 74 { it = 0x6D/*_VK_SUBTRACT*/ }
		case 75 { it = 0x64/*_VK_NUMPAD4*/ }
		case 76 { it = 0x65/*_VK_NUMPAD5*/ }
		case 77 { it = 0x66/*_VK_NUMPAD6*/ }
		case 78 { it = 0x6B/*_VK_ADD*/ }
		case 79 { it = 0x61/*_VK_NUMPAD1*/ }
		case 80 { it = 0x62/*_VK_NUMPAD2*/ }
		case 81 { it = 0x63/*_VK_NUMPAD3*/ }
		case 82 { it = 0x60/*_VK_NUMPAD0*/ }
		case 83 { it = 0x6E/*_VK_DECIMAL*/ }
		case 156 { it = 0xD/*_VK_ENTER*/ }
		case 157 { it = e? 0xA3/*_VK_RCTRL*/: 0x11/*_VK_CTRL*/ }
		case 183 { it = 0x2A/*_VK_PRINT*/}
		case 184 { it = e? 0xA5/*_VK_RALT*/: 0x12/*_VK_ALT*/ }
		case 197 { it = 0x13/*_VK_PAUSE*/ }
		case 199 { it = 0x24/*_VK_HOME*/ }
		case 200 { it = 0x26/*_VK_UP*/ }
		case 201 { it = 0x21/*_VK_PGUP*/ }
		case 203 { it = 0x25/*_VK_LEFT*/ }
		case 205 { it = 0x27/*_VK_RIGHT*/ }
		case 207 { it = 0x23/*_VK_END*/ }
		case 208 { it = 0x28/*_VK_DOWN*/ }
		case 209 { it = 0x22/*_VK_PGDN*/ }
		case 210 { it = 0x2D/*_VK_INSERT*/ }
		case 211 { it = 0x2E/*_VK_DELETE*/ }
		case 219 { it = e? 0x5B/*_VK_LWIN*/: 0x5B/*_VK_LWIN*/ }
		case 220 { it = e? 0x5C/*_VK_RWIN*/: 0x5B/*_VK_LWIN*/ }
		case 221 { it = 0x5D/*_VK_APPS*/ }
		//case  { it = e? :  }
	}
	return it; 
};
v2dik = function(code) {
	var it;
	it = key.v2scan(code, e)
	select (code) { 
		//case  { it = e? :  }
		//case  { it =  }
		case 3,12 { it = null }
		case 19 { it = 0xC5/*_DIK_PAUSE*/ }
		case 91 { it = 0xDB/*_DIK_LWIN*/ }
		case 92 { it = e? 0xDC/*_DIK_RWIN*/: 0xDB/*_DIK_LWIN*/ }
		case 33 { it = 0xC9/*_DIK_PGUP*/  }
		case 34 { it = 0xD1/*_DIK_PGDN*/  }
		case 35 { it = 0xCF/*_DIK_END*/   }
		case 36 { it = 0xC7/*_DIK_HOME*/  }
		case 37 { it = 0xCB/*_DIK_LEFT*/  }
		case 38 { it = 0xC8/*_DIK_UP*/    }
		case 39 { it = 0xCD/*_DIK_RIGHT*/ }
		case 40 { it = 0xD0/*_DIK_DOWN*/ } 
		
	}
	return it; 
};
import seiki.dik.DIK
test = function(orig){
	/*
c = key.v2scan(code,true)
	console.log(code, ..string.replace(tostring(code,16),"0x",""),
	c, ..string.replace(tostring(c,16),"0x",""), 
	key.getName(c), key.getName(dik2v(code)), key.getName(dik2v(code, true)))
*/
	v2s = key.v2scan(orig,true)
	
	console.log(
	orig, ..string.replace(tostring(orig,16),"0x",""),
	v2s, ..string.replace(tostring(v2s,16),"0x",""), 
	key.getName(orig), 
	key.getName(key.scan2v(key.v2scan(orig, true),  true)), 
	seiki.dik.DIK_NAME[v2dik(orig, true)],
	)
}


//console.pause()

/**intellisense(seiki.dik)
dik2v(__/*DIK键码*/) = 将DIK键码转换为Win32虚拟键码\n虚拟键码(Visual Code，_VK前缀常量)\nDIK键码(DirectInput使用的键码)
v2dik(__/*虚拟键码*/) = 将Win32虚拟键码转换为DIK键码\n虚拟键码(Visual Code，_VK前缀常量)\nDIK键码(DirectInput使用的键码)
end intellisense**/

/*
MAPVK_VK_TO_VSC		0	uCode 参数是一个虚拟键代码，并转换为扫描代码。 如果它是不区分左键和右键的虚拟键代码，则返回左侧扫描代码。 如果没有转换，则函数返回 0。
MAPVK_VSC_TO_VK		1	uCode 参数是扫描代码，并转换为不区分左键和右键的虚拟键代码。 如果没有转换，则函数返回 0。
MAPVK_VK_TO_CHAR	2	uCode 参数是一个虚拟键代码，在返回值的低序字中转换为未移位的字符值。 (音调符号) 的死键通过设置返回值的顶部位来指示。 如果没有转换，则函数返回 0。 请参阅“备注”。
MAPVK_VSC_TO_VK_EX	3	uCode 参数是扫描代码，并转换为区分左键和右键的虚拟键代码。 如果没有转换，则函数返回 0。
MAPVK_VK_TO_VSC_EX	4	Windows Vista 及更高版本：uCode 参数是一个虚拟键代码，并转换为扫描代码。 如果它是不区分左键和右键的虚拟键代码，则返回左侧扫描代码。 如果扫描代码是扩展扫描代码， 则 uCode 值的高字节可以包含指定扩展扫描代码0xe0或0xe1。 如果没有转换，则函数返回 0。
*/

//#define 	(DIK_.+) {3}(0x..)(?: /\*(.+)\*/)?
//_$1=@$2/*_$1*/
//#define 	(DIK_.+) {3}(DIK_.+)(?: /\*(.+)\*/)
//_$1=@ /*=_$2 _$1*/
//#define 	DIK_(.+) {3}(0x..)( /\*.+\*/)?
//$1 = $2$3
//#define 	DIK_(.+) {3}DIK_(.+)( /\*.+\*/)?
//$1 =  $3
//#define 	DIK_(.+) {3}(DIK_.+) /\*(.+)\*/
///*=$2$3*/
//.+	(DIK_.*)	0x..	(\d+)	.*
//case $2 { it = $1 }